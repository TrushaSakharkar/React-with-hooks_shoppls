{"version":3,"sources":["components/main.component.js","components/updateAction.js","components/names.component.js","App.js","serviceWorker.js","index.js"],"names":["Main","window","location","updateAction","state","payload","yourDetails","Names","props","useStateMachine","action","useForm","defaultValues","register","handleSubmit","style","position","left","top","display","className","name","ref","onClick","data","console","log","App","path","exact","component","Boolean","hostname","match","createStore","index","Firstname","Lastname","Address","City","Email","Contactno","ReactDOM","render","StrictMode","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+NAmBeA,MAVf,WACE,OACI,6BACA,gDAECC,OAAOC,SAAW,SAHnB,M,wBCXS,SAASC,EAAaC,EAAMC,GAEvC,kCACOD,GADP,IAEIE,YAAY,2BACLF,EAAME,aACND,KCAf,IAsCeE,EAtCD,SAAAC,GAAU,IAAD,EACMC,YAAgBN,GAAjCC,EADW,EACXA,MAAMM,EADK,EACLA,OADK,EAEcC,YAAQ,CACvCC,cAAeR,EAAME,cADjBO,EAFa,EAEbA,SAAUC,EAFG,EAEHA,aASlB,OACI,yBAAKC,MAAO,CAACC,SAAS,WAAYC,KAAK,MAAOC,IAAI,QAC9C,8CACN,0BAAMH,MAAO,CAACI,QAAQ,UAClB,6BACF,6CAEE,2BAAOC,UAAU,4BAA4BC,KAAK,YAAYC,IAAKT,MAGnE,6BACF,4CAEE,2BAAOO,UAAU,4BAA4BC,KAAK,WAAWC,IAAKT,MAGpE,6BACA,4BAAQO,UAAU,4BAA4BG,QAAST,GAvB5C,SAAAU,GACbd,EAAOc,GACPC,QAAQC,IAAIF,OAqBV,YCRSG,MAhBf,WACE,OACE,yBAAKP,UAAU,OAEb,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOQ,KAAO,IAAKC,OAAK,EAACC,UAAW9B,IACrC,kBAAC,IAAD,CAAO4B,KAAO,SAAUC,OAAK,EAACC,UAAWvB,OCJ1BwB,QACW,cAA7B9B,OAAOC,SAAS8B,UAEe,UAA7B/B,OAAOC,SAAS8B,UAEhB/B,OAAOC,SAAS8B,SAASC,MACvB,2D,MCRNC,YAAY,CACV5B,YAAa,CACT6B,MAAM,EACNC,UAAU,GACVC,SAAS,GACTC,QAAQ,GACRC,KAAK,GACLC,MAAM,GACNC,UAAU,MAIhBC,IAASC,OACP,kBAAC,IAAD,KACA,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OACCC,IAGHC,SAASC,eAAe,SDsGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.1767d947.chunk.js","sourcesContent":["import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport { StateMachineProvider, createStore } from \"little-state-machine\";\n// import { withRouter } from \"react-router-dom\";\n// import Names from \"./names.component\"\n\n\n\n\nfunction Main() {\n  return (\n      <div>\n      <h1>Page Form Wizard</h1>\n{/* <Names /> */}\n      {window.location=  '/names'};\n      </div>\n  );\n}\n// export default withRouter(Main);\nexport default Main;\n\n","export default function updateAction(state,payload)\n{\n    return{\n        ...state,\n        yourDetails:{\n            ...state.yourDetails,\n            ...payload\n        }\n    };\n}","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\n// import { withRouter } from \"react-router-dom\";\nimport { useStateMachine } from \"little-state-machine\";\nimport updateAction from \"./updateAction\";\n\nconst Names = props => {\n    const { state,action } = useStateMachine(updateAction);\n  const { register, handleSubmit } = useForm({\n      defaultValues: state.yourDetails  \n  });\n  const onNext = data => {\n    action(data);\n    console.log(data);\n//  window.location='/address';\n  };\n\n  return (\n      <div style={{position:\"absolute\", left:\"45%\", top:\"35%\"}}>\n          <h2>Fill the Form!</h2>\n    <form style={{display:\"block\"}} >\n        <div>\n      <label>\n        First Name:\n        <input className=\"form-control rounded-pill\" name=\"Firstname\" ref={register} />\n      </label>\n      </div>\n        <div>\n      <label>\n        Last Name:\n        <input className=\"form-control rounded-pill\" name=\"Lastname\" ref={register} />\n      </label>\n      </div>\n      <div>\n      <button className=\"rounded-pill btn btn-dark\" onClick={handleSubmit(onNext)}>Next</button>\n      </div>\n      </form>\n      </div>\n\n   \n  );\n};\n\n// export default withRouter(Names);\nexport default Names;","import React, {Component} from 'react';\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport Main from \"./components/main.component\"\n// import Address from \"./components/address.component\"\n// import Contact from \"./components/contact.component\"\n// import Print from \"./components/print.component\"\n import Names from \"./components/names.component\"\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     {/* <Main /> */}\n      <Router>\n      <Route path={ '/'} exact component={Main}/>\n     <Route path={ '/names'} exact component={Names}/>\n{/*      \n     <Route path={ '/print'} exact component={Print}/>\n     <Route path={ '/address'} exact component={Address}/> \n     {<Route path={ '/contact'} exact component={Contact}/> }  */}\n   </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport { StateMachineProvider, createStore ,DevTool} from \"little-state-machine\";\n\n\n\ncreateStore({\n  yourDetails: {\n      index:0,\n      Firstname:\"\",\n      Lastname:\"\",\n      Address:\"\",\n      City:\"\",\n      Email:\"\",\n      Contactno:\"\"\n  }\n});\n\nReactDOM.render(\n  <StateMachineProvider>\n  <React.StrictMode>\n    <App />\n    {process.env.NODE_ENV !== 'production' && <DevTool />}\n  </React.StrictMode>\n  </StateMachineProvider>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}